#include "groupServerCore.h"

GroupServerCoreClerk::GroupServerCoreClerk(int port_num,string gn,string gip){
	flag_set = false;
	flag_add = false;
	port = port_num;
	group_name = gn;
	general_IP = gip;
}

int GroupServerCoreClerk::doClientCommand(int fd){
	int n;
	message mssg;
	n = read( fd, (char*)(&mssg), sizeof(mssg));
	if( n<0 ){
		cout<<"reading error failed."<<endl;
		return;
	}
	if( mssg.type == log_type ){
		cout<<mssg.body<<endl;	

	}

}

int GroupServerCoreClerk::doServerCommand(){
	string comm1,comm2;
	int port;
	cin>>comm1;
	int portNu;
	if(comm1 == "Connect"){
		cin>>comm2;
		if(comm2 == "Router"){
			string temp;
			cin>>temp;
			if(!flag_set){
				cout<<"General IP must be set."<<endl;
				return -1;
			}
			int n, m;//return value of read/write calls
			int fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
			file_descriptory = fd;
			string port_no = temp;
			struct sockaddr_in serv_addr;
			serv_addr.sin_family = AF_INET;
			serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
			serv_addr.sin_port = htons(atoi(port_no.c_str()));
			int status = connect(fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
			//string chert;
			//getline(cin, chert);
			
			if(status < 0)
			{
				cerr<<"Conention failed\n";
			}
			else cerr<<"Successfully Connected\n";
			flag_add = true;
			return fd;			
		}
	} else if( comm1 == "Set"){
		cin >> comm1>> comm2;
		if( comm1 == "IP" && comm2 == "multicast" ){
			cin >> comm1;
			multicast_IP = comm1;
		}
		flag_set = true;
	} else if( comm1 == "Add"){
		int s;
		cin>> comm2;
		if( comm2 == "server"){
			if(!flag_set){
				cout<<"Connection must be established."<<endl;
				return -1;
			}
		}
		message mssg;
		mssg = message_from_string(group_name+" "+general_IP+" "+multicast_IP);
		s = write(file_descriptory, (char*)(&mssg), sizeof(mssg));
		if( s<0 ){
			cout<<"Packets did not send successfully"<<endl;
		}

	}
	return -1;
}

